
// List.h
// リスト
//============================================================================//
// 概要：なし。
// 補足：なし。
//============================================================================//

#ifndef  __LIST_H__
#define  __LIST_H__


/******************************************************************************/
//		インクルード
/******************************************************************************/

#include "uStl.h"


/******************************************************************************/
//		クラス定義
/******************************************************************************/

template <class T> class List
{
protected:
	vector<T> vecItem;

public:
	static const UINT npos;

	List();
	List(const List&);
	~List();

// 基本動作
	UINT GetSize() const;
	BOOL IsInList(UINT) const;

	virtual BOOL Insert(T, UINT ui = 0);
	virtual BOOL Delete(UINT);

	BOOL Clear();

	const T at(UINT) const;
	T at(UINT);

// 付加動作
	BOOL PushBack(T);
	BOOL Pop();

	BOOL Move(UINT, UINT);

	const T operator[](UINT) const;
	T operator[](UINT);

	UINT Find(const T&, UINT uiIndexStart = 0) const;
};



/******************************************************************************/
//		定義
/******************************************************************************/

template <class T> UINT List<T>::npos = -1;


/******************************************************************************/
//		コンストラクタおよびデストラクタ
/******************************************************************************/
// コンストラクタ
//============================================================================//
// 概要：なし。
// 補足：なし。
//============================================================================//

template <class T> List<T>::List()
{
}


/******************************************************************************/
// コピーコンストラクタ
//============================================================================//
// 概要：なし。
// 補足：なし。
//============================================================================//

template <class T> List<T>::List(const List& l)
{
	vecItem = l.vecItem;
}


/******************************************************************************/
// デストラクタ
//============================================================================//
// 概要：なし。
// 補足：なし。
//============================================================================//

template <class T> List<T>::~List()
{
}



/******************************************************************************/
//		基本動作
/******************************************************************************/
// サイズ取得
//============================================================================//
// 概要：なし。
// 補足：なし。
//============================================================================//

template <class T> UINT List<T>::GetSize() const
{
	return vecItem.size();
}


/******************************************************************************/
// リストの中にあるか
//============================================================================//
// 概要：なし。
// 補足：なし。
//============================================================================//

template <class T> BOOL List<T>::IsInList(UINT ui) const
{
	return ui < GetSize();
}

/******************************************************************************/
// 追加
//============================================================================//
// 概要：なし。
// 補足：なし。
//============================================================================//

template <class T> BOOL List<T>::Insert(T t, UINT ui)
{
	if(!IsInList(ui) && ui != GetSize())
	{
		return FALSE;
	}

	vector<T>::iterator p = vecItem.begin() + ui;
	vecItem.insert(p, t);

	return TRUE;
}


/******************************************************************************/
// 削除
//============================================================================//
// 概要：なし。
// 補足：なし。
//============================================================================//

template <class T> BOOL List<T>::Delete(UINT ui)
{
	if(!IsInList(ui))
	{
		return FALSE;
	}

	vector<T>::iterator p = vecItem.begin() + ui;
	vecItem.erase(p);

	return TRUE;
}


/******************************************************************************/
// 全消去
//============================================================================//
// 概要：なし。
// 補足：なし。
//============================================================================//

template <class T> BOOL List<T>::Clear()
{
	while(GetSize() != 0)
	{
		Delete(0);
	}
	return TRUE;
}


/******************************************************************************/
// 要素取得
//============================================================================//
// 概要：なし。
// 補足：なし。
//============================================================================//

template <class T> T List<T>::at(UINT ui)
{
	if(!IsInList(ui))
	{
		return 0;
	}

	return vecItem[ui];
}


/******************************************************************************/
// コンスタント要素取得
//============================================================================//
// 概要：なし。
// 補足：なし。
//============================================================================//

template <class T> const T List<T>::at(UINT ui) const
{
	if(!IsInList(ui))
	{
		return 0;
	}

	return vecItem[ui];
}


/******************************************************************************/
//		付加動作
/******************************************************************************/
// 末尾に追加
//============================================================================//
// 概要：なし。
// 補足：なし。
//============================================================================//

template <class T> BOOL List<T>::PushBack(T t)
{
	return Insert(t, GetSize());
}


/******************************************************************************/
// 末尾から削除
//============================================================================//
// 概要：なし。
// 補足：なし。
//============================================================================//

template <class T> BOOL List<T>::Pop()
{
	return Delete(GetSize() - 1);
}


/******************************************************************************/
// 要素移動
//============================================================================//
// 概要：なし。
// 補足：なし。
//============================================================================//

template <class T> BOOL List<T>::Move(UINT uiFrom, UINT uiTo)
{
	if(!IsInList(uiFrom) || !IsInList(uiTo))
	{
		return FALSE;
	}

	if(uiFrom < uiTo)
	{
		Insert(at(uiFrom), uiTo);
		Delete(uiFrom);
	}
	else
	{
		Insert(at(uiFrom), uiTo);
		Delete(uiFrom + 1);
	}
	return TRUE;
}


/******************************************************************************/
// 要素取得
//============================================================================//
// 概要：なし。
// 補足：なし。
//============================================================================//

template <class T> T List<T>::operator[](UINT ui)
{
	return at(ui);
}


/******************************************************************************/
// コンスタント要素取得
//============================================================================//
// 概要：なし。
// 補足：なし。
//============================================================================//

template <class T> const T List<T>::operator[](UINT ui) const
{
	return at(ui);
}


/******************************************************************************/
// 検索
//============================================================================//
// 概要：一番最初に引数と等しい物を返す。
// 補足：なし。
//============================================================================//

template <class T> UINT List<T>::Find(const T& t, UINT uiIndexStart) const
{
	UINT ui;
	for(ui = uiIndexStart; ui < GetSize(); ui++)
	{
		if(t == at(ui))
		{
			return ui;
		}
	}

	return -1;
}

#endif